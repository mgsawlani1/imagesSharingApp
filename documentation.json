{
    "pipes": [],
    "interfaces": [
        {
            "name": "AppState",
            "id": "interface-AppState-bec5028353fc11395986462e64d0129a",
            "file": "src/app/store/app.state.ts",
            "type": "interface",
            "sourceCode": "import { createFeatureSelector } from '@ngrx/store';\r\nimport * as image from '../store/reducers/image.reducer';\r\nimport * as auth from '../store/reducers/login.reducer';\r\n\r\nexport interface AppState {\r\n  authState: auth.State;\r\n  image: image.State;\r\n}\r\n\r\nexport const reducers = {\r\n  auth: auth.reducer,\r\n  image: image.imageReducer,\r\n};\r\n\r\nexport const selectAuthState = createFeatureSelector<AppState>('auth');\r\nexport const imageState = createFeatureSelector<AppState>('image');\r\n",
            "properties": [
                {
                    "name": "authState",
                    "type": "auth.State",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "image",
                    "type": "image.State",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "Image",
            "id": "interface-Image-30ff142bde38e6b63d51a56af498f28a",
            "file": "src/app/core/models/image.ts",
            "type": "interface",
            "sourceCode": "export interface Image {\r\n  id: number;\r\n  name: string;\r\n  description: string;\r\n  imageUrl: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "description",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "imageUrl",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "name",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "ImageState",
            "id": "interface-ImageState-0c6fff7cc303ca959a189fa9aa65fc06",
            "file": "src/app/store/image.state.ts",
            "type": "interface",
            "sourceCode": "import { Image } from './../core/models/image';\r\n\r\nexport interface ImageState {\r\n  readonly image: Image[];\r\n}\r\n",
            "properties": [
                {
                    "name": "image",
                    "type": "Image[]",
                    "optional": false,
                    "description": "",
                    "line": 4,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-cace9e3d913f9d38ff859f4a1cc4331a",
            "file": "src/app/store/reducers/image.reducer.ts",
            "type": "interface",
            "sourceCode": "import { Image } from '../../core/models/image';\r\nimport {\r\n  ADD_IMAGE_SUCCESS,\r\n  DELETE_IMAGE,\r\n  DELETE_IMAGE_SUCCESS,\r\n  ImageActions,\r\n  UPDATE_IMAGE,\r\n  UPDATE_IMAGE_SUCCESS,\r\n} from '../actions/image.actions';\r\nimport { ADD_IMAGE, GET_IMAGES } from './../actions/image.actions';\r\n\r\nexport interface State {\r\n  image: Image[];\r\n  success: boolean | null;\r\n  message: string | null;\r\n}\r\nexport const initialState: State = {\r\n  image: [],\r\n  message: null,\r\n  success: null,\r\n};\r\n\r\nexport function imageReducer(state: State = initialState, action: ImageActions): State {\r\n  switch (action.type) {\r\n    case GET_IMAGES: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case ADD_IMAGE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case DELETE_IMAGE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    case UPDATE_IMAGE: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    // case DATA_LOAD: {\r\n    //   return {\r\n    //     image: action.payload,\r\n    //     message: null,\r\n    //     success: null,\r\n    //   };\r\n    // }\r\n    case ADD_IMAGE_SUCCESS: {\r\n      return {\r\n        image: [...state.image, action.payload],\r\n        message: 'The image is added successfully!',\r\n        success: true,\r\n      };\r\n    }\r\n    case UPDATE_IMAGE_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        message: 'The image is updated successfully!',\r\n        success: true,\r\n      };\r\n    }\r\n    case DELETE_IMAGE_SUCCESS: {\r\n      return {\r\n        ...state,\r\n      };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "image",
                    "type": "Image[]",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "message",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "success",
                    "type": "boolean | null",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        },
        {
            "name": "State",
            "id": "interface-State-acd9935d2cc9552d83321a3aa4dc884a-1",
            "file": "src/app/store/reducers/login.reducer.ts",
            "type": "interface",
            "sourceCode": "import { User } from '../../core/models/user';\r\nimport { AuthAction, AuthActionTypes } from './../actions/login.actions';\r\n\r\nexport interface State {\r\n  isAuthenticated: boolean;\r\n  user: User | null;\r\n  errorMessage: string | null;\r\n}\r\nexport const initialState: State = {\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n};\r\n\r\nexport function reducer(state = initialState, action: AuthAction): State {\r\n  switch (action.type) {\r\n    case AuthActionTypes.LOGIN_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: true,\r\n        user: {\r\n          username: action.payload.username,\r\n          password: action.payload.password,\r\n        },\r\n        errorMessage: null,\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGIN_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'Incorrect name and/or password.',\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_SUCCESS: {\r\n      return {\r\n        ...state,\r\n        isAuthenticated: false,\r\n        user: {\r\n          username: action.payload.username,\r\n          password: action.payload.password,\r\n        },\r\n        errorMessage: null,\r\n      };\r\n    }\r\n    case AuthActionTypes.SIGNUP_FAILURE: {\r\n      return {\r\n        ...state,\r\n        errorMessage: 'The user is already Registered.',\r\n      };\r\n    }\r\n    case AuthActionTypes.LOGOUT: {\r\n      return initialState;\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "user",
                    "type": "User | null",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "State-1"
        },
        {
            "name": "User",
            "id": "interface-User-02bed9e185e7ee03bb2cc121f7d76827",
            "file": "src/app/core/models/user.ts",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  username: string;\r\n  password: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 150,
            "methods": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-8841259fa9c631ffd0e7eb0df7d799a7",
            "file": "src/app/store/effects/auth.effects.ts",
            "properties": [
                {
                    "name": "LogIn",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN),\r\n    map((action: LogIn) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.getAuthData(payload).pipe(\r\n        map((user) => {\r\n          if (user.length > 0) {\r\n            return new LogInSuccess({ username: payload.username });\r\n          } else {\r\n            return new LogInFailure({ error: 'Invalid credentials' });\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "LogInFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE),\r\n    tap((err) => {\r\n      this.authService.errorMessage = err.payload.error;\r\n      window.alert('Invalid Credentials');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "LogInSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', JSON.stringify(user.payload));\r\n      window.alert('Logged in successfully');\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "Logout",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    tap((user) => {\r\n      localStorage.removeItem('user');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 99,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUp",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP),\r\n    map((action: SignUp) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService\r\n        .addUser(payload.username, payload.password)\r\n        .pipe(\r\n          map((user) => {\r\n            return new SignUpSuccess({\r\n              username: payload.username,\r\n              password: payload.password,\r\n            });\r\n          })\r\n        )\r\n        .pipe(\r\n          catchError((error) => {\r\n            return of(new SignUpFailure({ error }));\r\n          })\r\n        );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": ""
                        }
                    ]
                },
                {
                    "name": "SignUpFailure",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n    tap((user) => {})\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "<p>TODO: Combine signupFailure and login failure to create a single effect</p>\n",
                    "line": 93,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                },
                {
                    "name": "SignUpSuccess",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', user.payload);\r\n      window.alert('Registered successfully');\r\n      this.router.navigateByUrl('login');\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: false}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable, of } from 'rxjs';\r\nimport { catchError, map, switchMap, tap } from 'rxjs/operators';\r\nimport {\r\n  AuthActionTypes,\r\n  LogIn,\r\n  LogInFailure,\r\n  LogInSuccess,\r\n  SignUp,\r\n  SignUpFailure,\r\n  SignUpSuccess,\r\n} from '../actions/login.actions';\r\nimport { AuthService } from './../../core/services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthEffects {\r\n  constructor(private actions: Actions, private authService: AuthService, private router: Router) {}\r\n\r\n  @Effect()\r\n  LogIn: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN),\r\n    map((action: LogIn) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService.getAuthData(payload).pipe(\r\n        map((user) => {\r\n          if (user.length > 0) {\r\n            return new LogInSuccess({ username: payload.username });\r\n          } else {\r\n            return new LogInFailure({ error: 'Invalid credentials' });\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  LogInSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', JSON.stringify(user.payload));\r\n      window.alert('Logged in successfully');\r\n      this.router.navigateByUrl('/');\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  LogInFailure: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGIN_FAILURE),\r\n    tap((err) => {\r\n      this.authService.errorMessage = err.payload.error;\r\n      window.alert('Invalid Credentials');\r\n    })\r\n  );\r\n\r\n  @Effect()\r\n  SignUp: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP),\r\n    map((action: SignUp) => action.payload),\r\n    switchMap((payload) => {\r\n      return this.authService\r\n        .addUser(payload.username, payload.password)\r\n        .pipe(\r\n          map((user) => {\r\n            return new SignUpSuccess({\r\n              username: payload.username,\r\n              password: payload.password,\r\n            });\r\n          })\r\n        )\r\n        .pipe(\r\n          catchError((error) => {\r\n            return of(new SignUpFailure({ error }));\r\n          })\r\n        );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  SignUpSuccess: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_SUCCESS),\r\n    tap((user) => {\r\n      localStorage.setItem('user', user.payload);\r\n      window.alert('Registered successfully');\r\n      this.router.navigateByUrl('login');\r\n    })\r\n  );\r\n  /**\r\n   * TODO: Combine signupFailure and login failure to create a single effect\r\n   */\r\n  @Effect({ dispatch: false })\r\n  SignUpFailure: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.SIGNUP_FAILURE),\r\n    tap((user) => {})\r\n  );\r\n\r\n  @Effect({ dispatch: false })\r\n  Logout: Observable<any> = this.actions.pipe(\r\n    ofType(AuthActionTypes.LOGOUT),\r\n    tap((user) => {\r\n      localStorage.removeItem('user');\r\n    })\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "actions",
                        "type": "Actions"
                    },
                    {
                        "name": "authService",
                        "type": "AuthService"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    }
                ],
                "line": 18,
                "jsdoctags": [
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "AuthService",
            "id": "injectable-AuthService-07240c56c7d76d6608a95ed86de08511",
            "file": "src/app/core/services/auth.service.ts",
            "properties": [
                {
                    "name": "_jsonURL",
                    "defaultValue": "environment.baseURL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "errorStatusMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        112
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methods": [
                {
                    "name": "addUser",
                    "args": [
                        {
                            "name": "username",
                            "type": "string"
                        },
                        {
                            "name": "password",
                            "type": "string"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 36,
                    "jsdoctags": [
                        {
                            "name": "username",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "password",
                            "type": "string",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAuthData",
                    "args": [
                        {
                            "name": "user",
                            "type": "User"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 30,
                    "jsdoctags": [
                        {
                            "name": "user",
                            "type": "User",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { User } from './../models/user';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private errorStatusMessage: string;\r\n  get errorMessage(): string {\r\n    return this.errorStatusMessage;\r\n  }\r\n\r\n  set errorMessage(msg: string) {\r\n    this.errorStatusMessage = msg;\r\n  }\r\n\r\n  readonly _jsonURL = environment.baseURL;\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getAuthData(user: User): Observable<any> {\r\n    const url = encodeURI('auth?username=' + user.username + '&password=' + user.password);\r\n    return this.http\r\n      .get<User>(this._jsonURL + url, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n  addUser(username: string, password: string): Observable<any> {\r\n    const url = `${this._jsonURL}auth`;\r\n    return this.http\r\n      .post<User>(url, { username, password }, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  errorHandler(error): Observable<never> {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "accessors": {
                "errorMessage": {
                    "name": "errorMessage",
                    "setSignature": {
                        "name": "errorMessage",
                        "type": "void",
                        "args": [
                            {
                                "name": "msg",
                                "type": "string"
                            }
                        ],
                        "returnType": "void",
                        "line": 17,
                        "jsdoctags": [
                            {
                                "name": "msg",
                                "type": "string",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "errorMessage",
                        "type": "string",
                        "returnType": "string",
                        "line": 13
                    }
                }
            },
            "type": "injectable"
        },
        {
            "name": "ImageEffects",
            "id": "injectable-ImageEffects-2970a093c5a68ebd4640834b7bbb6965",
            "file": "src/app/store/effects/image.effect.ts",
            "properties": [
                {
                    "name": "Add",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(ADD_IMAGE),\r\n    map((action: Add) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.imageService.addImage(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new AddImageSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "Delete",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(DELETE_IMAGE),\r\n    map((action: Delete) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.imageService.deleteImageById(payload).pipe(\r\n        map((data) => {\r\n          return new DeleteImageSuccess();\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "GetImages",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(GET_IMAGES),\r\n    map((action: GetImages) => action),\r\n    mergeMap((payload) => {\r\n      return this.imageService.getImageData().pipe(\r\n        map((data) => {\r\n          return new LoadDataSuccess(data);\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                },
                {
                    "name": "UpdateImages",
                    "defaultValue": "this.actions.pipe(\r\n    ofType(UPDATE_IMAGE),\r\n    map((action: Update) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.imageService.updateImage(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new UpdateImageSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  )",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 64,
                    "decorators": [
                        {
                            "name": "Effect",
                            "stringifiedArguments": "{dispatch: true}"
                        }
                    ]
                }
            ],
            "methods": [],
            "description": "",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Actions, Effect, ofType } from '@ngrx/effects';\r\nimport { Observable } from 'rxjs';\r\nimport { map, mergeMap } from 'rxjs/operators';\r\nimport { ImagesService } from './../../core/services/images.service';\r\nimport {\r\n  Add,\r\n  AddImageSuccess,\r\n  ADD_IMAGE,\r\n  Delete,\r\n  DeleteImageSuccess,\r\n  DELETE_IMAGE,\r\n  GetImages,\r\n  GET_IMAGES,\r\n  LoadDataSuccess,\r\n  Update,\r\n  UpdateImageSuccess,\r\n  UPDATE_IMAGE,\r\n} from './../actions/image.actions';\r\n\r\n@Injectable()\r\nexport class ImageEffects {\r\n  constructor(private imageService: ImagesService, private actions: Actions) {}\r\n  @Effect({ dispatch: true })\r\n  GetImages: Observable<any> = this.actions.pipe(\r\n    ofType(GET_IMAGES),\r\n    map((action: GetImages) => action),\r\n    mergeMap((payload) => {\r\n      return this.imageService.getImageData().pipe(\r\n        map((data) => {\r\n          return new LoadDataSuccess(data);\r\n        })\r\n      );\r\n    })\r\n  );\r\n\r\n  @Effect({ dispatch: true })\r\n  Add: Observable<any> = this.actions.pipe(\r\n    ofType(ADD_IMAGE),\r\n    map((action: Add) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.imageService.addImage(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new AddImageSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n  @Effect({ dispatch: true })\r\n  Delete: Observable<any> = this.actions.pipe(\r\n    ofType(DELETE_IMAGE),\r\n    map((action: Delete) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.imageService.deleteImageById(payload).pipe(\r\n        map((data) => {\r\n          return new DeleteImageSuccess();\r\n        })\r\n      );\r\n    })\r\n  );\r\n  @Effect({ dispatch: true })\r\n  UpdateImages: Observable<any> = this.actions.pipe(\r\n    ofType(UPDATE_IMAGE),\r\n    map((action: Update) => action.payload),\r\n    mergeMap((payload) => {\r\n      return this.imageService.updateImage(payload).pipe(\r\n        map((data) => {\r\n          if (data) {\r\n            return new UpdateImageSuccess(data);\r\n          }\r\n        })\r\n      );\r\n    })\r\n  );\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "imageService",
                        "type": "ImagesService"
                    },
                    {
                        "name": "actions",
                        "type": "Actions"
                    }
                ],
                "line": 22,
                "jsdoctags": [
                    {
                        "name": "imageService",
                        "type": "ImagesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "actions",
                        "type": "Actions",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        },
        {
            "name": "ImagesService",
            "id": "injectable-ImagesService-c3f596afda1cbe03cecae5a0ffc4fcb4",
            "file": "src/app/core/services/images.service.ts",
            "properties": [
                {
                    "name": "_jsonURL",
                    "defaultValue": "environment.baseURL",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        132
                    ]
                },
                {
                    "name": "httpOptions",
                    "defaultValue": "{\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  }",
                    "type": "object",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "images",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methods": [
                {
                    "name": "addImage",
                    "args": [
                        {
                            "name": "image",
                            "type": "Image"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Image>",
                    "typeParameters": [],
                    "line": 31,
                    "jsdoctags": [
                        {
                            "name": "image",
                            "type": "Image",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteImageById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Image>",
                    "typeParameters": [],
                    "line": 37,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorCatcher",
                    "args": [
                        {
                            "name": "error",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 48,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "errorHandler",
                    "args": [
                        {
                            "name": "error",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<never>",
                    "typeParameters": [],
                    "line": 59,
                    "jsdoctags": [
                        {
                            "name": "error",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImageData",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<Image>",
                    "typeParameters": [],
                    "line": 23
                },
                {
                    "name": "getImageDataById",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<Image>",
                    "typeParameters": [],
                    "line": 27,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateImage",
                    "args": [
                        {
                            "name": "image",
                            "type": "any"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 43,
                    "jsdoctags": [
                        {
                            "name": "image",
                            "type": "any",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "description": "",
            "sourceCode": "import { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { Image } from '../../core/models/image';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ImagesService {\r\n  images: any;\r\n  readonly _jsonURL = environment.baseURL;\r\n\r\n  httpOptions = {\r\n    headers: new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n    }),\r\n  };\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getImageData(): Observable<Image> {\r\n    return this.http.get<Image>(this._jsonURL + 'images/').pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  getImageDataById(id: number): Observable<Image> {\r\n    return this.http.get<Image>(this._jsonURL + 'images/' + id).pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  addImage(image: Image): Observable<Image> {\r\n    return this.http\r\n      .post<Image>(this._jsonURL + 'images/', JSON.stringify(image), this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  deleteImageById(id: number): Observable<Image> {\r\n    return this.http\r\n      .delete<Image>(this._jsonURL + 'images/' + id, this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n\r\n  updateImage(image: any): Observable<any> {\r\n    return this.http\r\n      .put<Image>(this._jsonURL + 'images/' + image.id, JSON.stringify(image), this.httpOptions)\r\n      .pipe(catchError(this.errorHandler));\r\n  }\r\n  errorCatcher(error: any): Observable<never> {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      errorMessage = `Error: ${error.error.message}`;\r\n    } else {\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n\r\n  errorHandler(error): Observable<never> {\r\n    let errorMessage = '';\r\n    if (error.error instanceof ErrorEvent) {\r\n      errorMessage = error.error.message;\r\n    } else {\r\n      errorMessage = `Error Code: ${error.status}\\nMessage: ${error.message}`;\r\n    }\r\n    window.alert(errorMessage);\r\n    return throwError(errorMessage);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "type": "injectable"
        }
    ],
    "classes": [
        {
            "name": "Add",
            "id": "class-Add-f24e3fdda5ea5e9bb665e5aa554235ae",
            "file": "src/app/store/actions/image.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Image } from '../../core/models/image';\r\n\r\nexport const ADD_IMAGE = '[Image] ADD';\r\nexport const GET_IMAGES = '[Image] GET';\r\nexport const UPDATE_IMAGE = '[Image] UPDATE';\r\nexport const DELETE_IMAGE = '[Image] DELETE';\r\nexport const DATA_LOAD = '[Image] LOAD';\r\n\r\nexport const ADD_IMAGE_SUCCESS = '[IMAGE] ADD IMAGE SUCCESS';\r\nexport const UPDATE_IMAGE_SUCCESS = '[IMAGE] UPDATE IMAGE SUCCESS';\r\nexport const DELETE_IMAGE_SUCCESS = '[IMAGE] DELETE IMAGE SUCCESS';\r\n\r\nexport class Add implements Action {\r\n  readonly type = ADD_IMAGE;\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class GetImages implements Action {\r\n  readonly type = GET_IMAGES;\r\n  constructor() {}\r\n}\r\nexport class Update implements Action {\r\n  readonly type = UPDATE_IMAGE;\r\n\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class Delete implements Action {\r\n  readonly type = DELETE_IMAGE;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class AddImageSuccess implements Action {\r\n  readonly type = ADD_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class UpdateImageSuccess implements Action {\r\n  readonly type = UPDATE_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class DeleteImageSuccess implements Action {\r\n  readonly type = DELETE_IMAGE_SUCCESS;\r\n}\r\n\r\nexport type ImageActions =\r\n  | Add\r\n  | GetImages\r\n  | Update\r\n  | Delete\r\n  | LoadDataSuccess\r\n  | UpdateImageSuccess\r\n  | AddImageSuccess\r\n  | DeleteImageSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Image"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Image",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Image",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_IMAGE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AddImageSuccess",
            "id": "class-AddImageSuccess-f24e3fdda5ea5e9bb665e5aa554235ae",
            "file": "src/app/store/actions/image.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Image } from '../../core/models/image';\r\n\r\nexport const ADD_IMAGE = '[Image] ADD';\r\nexport const GET_IMAGES = '[Image] GET';\r\nexport const UPDATE_IMAGE = '[Image] UPDATE';\r\nexport const DELETE_IMAGE = '[Image] DELETE';\r\nexport const DATA_LOAD = '[Image] LOAD';\r\n\r\nexport const ADD_IMAGE_SUCCESS = '[IMAGE] ADD IMAGE SUCCESS';\r\nexport const UPDATE_IMAGE_SUCCESS = '[IMAGE] UPDATE IMAGE SUCCESS';\r\nexport const DELETE_IMAGE_SUCCESS = '[IMAGE] DELETE IMAGE SUCCESS';\r\n\r\nexport class Add implements Action {\r\n  readonly type = ADD_IMAGE;\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class GetImages implements Action {\r\n  readonly type = GET_IMAGES;\r\n  constructor() {}\r\n}\r\nexport class Update implements Action {\r\n  readonly type = UPDATE_IMAGE;\r\n\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class Delete implements Action {\r\n  readonly type = DELETE_IMAGE;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class AddImageSuccess implements Action {\r\n  readonly type = ADD_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class UpdateImageSuccess implements Action {\r\n  readonly type = UPDATE_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class DeleteImageSuccess implements Action {\r\n  readonly type = DELETE_IMAGE_SUCCESS;\r\n}\r\n\r\nexport type ImageActions =\r\n  | Add\r\n  | GetImages\r\n  | Update\r\n  | Delete\r\n  | LoadDataSuccess\r\n  | UpdateImageSuccess\r\n  | AddImageSuccess\r\n  | DeleteImageSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Image"
                    }
                ],
                "line": 39,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Image",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Image",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "ADD_IMAGE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "AppPage",
            "id": "class-AppPage-a0db91bfa3b9914e9048612074084ee6",
            "file": "e2e/src/app.po.ts",
            "type": "class",
            "sourceCode": "import { browser, by, element } from 'protractor';\n\nexport class AppPage {\n  navigateTo(): Promise<unknown> {\n    return browser.get(browser.baseUrl) as Promise<unknown>;\n  }\n\n  getTitleText(): Promise<string> {\n    return element(by.css('app-root .content span')).getText() as Promise<string>;\n  }\n}\n",
            "properties": [],
            "methods": [
                {
                    "name": "getTitleText",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<string>",
                    "typeParameters": [],
                    "line": 8
                },
                {
                    "name": "navigateTo",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<unknown>",
                    "typeParameters": [],
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": []
        },
        {
            "name": "Delete",
            "id": "class-Delete-f24e3fdda5ea5e9bb665e5aa554235ae",
            "file": "src/app/store/actions/image.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Image } from '../../core/models/image';\r\n\r\nexport const ADD_IMAGE = '[Image] ADD';\r\nexport const GET_IMAGES = '[Image] GET';\r\nexport const UPDATE_IMAGE = '[Image] UPDATE';\r\nexport const DELETE_IMAGE = '[Image] DELETE';\r\nexport const DATA_LOAD = '[Image] LOAD';\r\n\r\nexport const ADD_IMAGE_SUCCESS = '[IMAGE] ADD IMAGE SUCCESS';\r\nexport const UPDATE_IMAGE_SUCCESS = '[IMAGE] UPDATE IMAGE SUCCESS';\r\nexport const DELETE_IMAGE_SUCCESS = '[IMAGE] DELETE IMAGE SUCCESS';\r\n\r\nexport class Add implements Action {\r\n  readonly type = ADD_IMAGE;\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class GetImages implements Action {\r\n  readonly type = GET_IMAGES;\r\n  constructor() {}\r\n}\r\nexport class Update implements Action {\r\n  readonly type = UPDATE_IMAGE;\r\n\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class Delete implements Action {\r\n  readonly type = DELETE_IMAGE;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class AddImageSuccess implements Action {\r\n  readonly type = ADD_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class UpdateImageSuccess implements Action {\r\n  readonly type = UPDATE_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class DeleteImageSuccess implements Action {\r\n  readonly type = DELETE_IMAGE_SUCCESS;\r\n}\r\n\r\nexport type ImageActions =\r\n  | Add\r\n  | GetImages\r\n  | Update\r\n  | Delete\r\n  | LoadDataSuccess\r\n  | UpdateImageSuccess\r\n  | AddImageSuccess\r\n  | DeleteImageSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "number"
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "number",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "number",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DELETE_IMAGE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 30,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "DeleteImageSuccess",
            "id": "class-DeleteImageSuccess-f24e3fdda5ea5e9bb665e5aa554235ae",
            "file": "src/app/store/actions/image.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Image } from '../../core/models/image';\r\n\r\nexport const ADD_IMAGE = '[Image] ADD';\r\nexport const GET_IMAGES = '[Image] GET';\r\nexport const UPDATE_IMAGE = '[Image] UPDATE';\r\nexport const DELETE_IMAGE = '[Image] DELETE';\r\nexport const DATA_LOAD = '[Image] LOAD';\r\n\r\nexport const ADD_IMAGE_SUCCESS = '[IMAGE] ADD IMAGE SUCCESS';\r\nexport const UPDATE_IMAGE_SUCCESS = '[IMAGE] UPDATE IMAGE SUCCESS';\r\nexport const DELETE_IMAGE_SUCCESS = '[IMAGE] DELETE IMAGE SUCCESS';\r\n\r\nexport class Add implements Action {\r\n  readonly type = ADD_IMAGE;\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class GetImages implements Action {\r\n  readonly type = GET_IMAGES;\r\n  constructor() {}\r\n}\r\nexport class Update implements Action {\r\n  readonly type = UPDATE_IMAGE;\r\n\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class Delete implements Action {\r\n  readonly type = DELETE_IMAGE;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class AddImageSuccess implements Action {\r\n  readonly type = ADD_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class UpdateImageSuccess implements Action {\r\n  readonly type = UPDATE_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class DeleteImageSuccess implements Action {\r\n  readonly type = DELETE_IMAGE_SUCCESS;\r\n}\r\n\r\nexport type ImageActions =\r\n  | Add\r\n  | GetImages\r\n  | Update\r\n  | Delete\r\n  | LoadDataSuccess\r\n  | UpdateImageSuccess\r\n  | AddImageSuccess\r\n  | DeleteImageSuccess;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "DELETE_IMAGE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "GetImages",
            "id": "class-GetImages-f24e3fdda5ea5e9bb665e5aa554235ae",
            "file": "src/app/store/actions/image.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Image } from '../../core/models/image';\r\n\r\nexport const ADD_IMAGE = '[Image] ADD';\r\nexport const GET_IMAGES = '[Image] GET';\r\nexport const UPDATE_IMAGE = '[Image] UPDATE';\r\nexport const DELETE_IMAGE = '[Image] DELETE';\r\nexport const DATA_LOAD = '[Image] LOAD';\r\n\r\nexport const ADD_IMAGE_SUCCESS = '[IMAGE] ADD IMAGE SUCCESS';\r\nexport const UPDATE_IMAGE_SUCCESS = '[IMAGE] UPDATE IMAGE SUCCESS';\r\nexport const DELETE_IMAGE_SUCCESS = '[IMAGE] DELETE IMAGE SUCCESS';\r\n\r\nexport class Add implements Action {\r\n  readonly type = ADD_IMAGE;\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class GetImages implements Action {\r\n  readonly type = GET_IMAGES;\r\n  constructor() {}\r\n}\r\nexport class Update implements Action {\r\n  readonly type = UPDATE_IMAGE;\r\n\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class Delete implements Action {\r\n  readonly type = DELETE_IMAGE;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class AddImageSuccess implements Action {\r\n  readonly type = ADD_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class UpdateImageSuccess implements Action {\r\n  readonly type = UPDATE_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class DeleteImageSuccess implements Action {\r\n  readonly type = DELETE_IMAGE_SUCCESS;\r\n}\r\n\r\nexport type ImageActions =\r\n  | Add\r\n  | GetImages\r\n  | Update\r\n  | Delete\r\n  | LoadDataSuccess\r\n  | UpdateImageSuccess\r\n  | AddImageSuccess\r\n  | DeleteImageSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [],
                "line": 20
            },
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "GET_IMAGES",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LoadDataSuccess",
            "id": "class-LoadDataSuccess-f24e3fdda5ea5e9bb665e5aa554235ae",
            "file": "src/app/store/actions/image.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Image } from '../../core/models/image';\r\n\r\nexport const ADD_IMAGE = '[Image] ADD';\r\nexport const GET_IMAGES = '[Image] GET';\r\nexport const UPDATE_IMAGE = '[Image] UPDATE';\r\nexport const DELETE_IMAGE = '[Image] DELETE';\r\nexport const DATA_LOAD = '[Image] LOAD';\r\n\r\nexport const ADD_IMAGE_SUCCESS = '[IMAGE] ADD IMAGE SUCCESS';\r\nexport const UPDATE_IMAGE_SUCCESS = '[IMAGE] UPDATE IMAGE SUCCESS';\r\nexport const DELETE_IMAGE_SUCCESS = '[IMAGE] DELETE IMAGE SUCCESS';\r\n\r\nexport class Add implements Action {\r\n  readonly type = ADD_IMAGE;\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class GetImages implements Action {\r\n  readonly type = GET_IMAGES;\r\n  constructor() {}\r\n}\r\nexport class Update implements Action {\r\n  readonly type = UPDATE_IMAGE;\r\n\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class Delete implements Action {\r\n  readonly type = DELETE_IMAGE;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class AddImageSuccess implements Action {\r\n  readonly type = ADD_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class UpdateImageSuccess implements Action {\r\n  readonly type = UPDATE_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class DeleteImageSuccess implements Action {\r\n  readonly type = DELETE_IMAGE_SUCCESS;\r\n}\r\n\r\nexport type ImageActions =\r\n  | Add\r\n  | GetImages\r\n  | Update\r\n  | Delete\r\n  | LoadDataSuccess\r\n  | UpdateImageSuccess\r\n  | AddImageSuccess\r\n  | DeleteImageSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Image"
                    }
                ],
                "line": 35,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Image",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Image",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "DATA_LOAD",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogIn",
            "id": "class-LogIn-46ca6a24061ef6b073b8425739c4796a",
            "file": "src/app/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../core/models/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Login] login',\r\n  SIGNUP = '[Login] signup',\r\n  LOGOUT = '[Login]  LogOut',\r\n  LOGIN_SUCCESS = '[Login] Login Success',\r\n  LOGIN_FAILURE = '[Login] Login Failure',\r\n  SIGNUP_SUCCESS = '[Login] SignUp Success',\r\n  SIGNUP_FAILURE = '[Login] SignUp Failure',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 15,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInFailure",
            "id": "class-LogInFailure-46ca6a24061ef6b073b8425739c4796a",
            "file": "src/app/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../core/models/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Login] login',\r\n  SIGNUP = '[Login] signup',\r\n  LOGOUT = '[Login]  LogOut',\r\n  LOGIN_SUCCESS = '[Login] Login Success',\r\n  LOGIN_FAILURE = '[Login] Login Failure',\r\n  SIGNUP_SUCCESS = '[Login] SignUp Success',\r\n  SIGNUP_FAILURE = '[Login] SignUp Failure',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "LogInSuccess",
            "id": "class-LogInSuccess-46ca6a24061ef6b073b8425739c4796a",
            "file": "src/app/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../core/models/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Login] login',\r\n  SIGNUP = '[Login] signup',\r\n  LOGOUT = '[Login]  LogOut',\r\n  LOGIN_SUCCESS = '[Login] Login Success',\r\n  LOGIN_FAILURE = '[Login] Login Failure',\r\n  SIGNUP_SUCCESS = '[Login] SignUp Success',\r\n  SIGNUP_FAILURE = '[Login] SignUp Failure',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 19,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGIN_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Logout",
            "id": "class-Logout-46ca6a24061ef6b073b8425739c4796a",
            "file": "src/app/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../core/models/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Login] login',\r\n  SIGNUP = '[Login] signup',\r\n  LOGOUT = '[Login]  LogOut',\r\n  LOGIN_SUCCESS = '[Login] Login Success',\r\n  LOGIN_FAILURE = '[Login] Login Failure',\r\n  SIGNUP_SUCCESS = '[Login] SignUp Success',\r\n  SIGNUP_FAILURE = '[Login] SignUp Failure',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "properties": [
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.LOGOUT",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUp",
            "id": "class-SignUp-46ca6a24061ef6b073b8425739c4796a",
            "file": "src/app/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../core/models/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Login] login',\r\n  SIGNUP = '[Login] signup',\r\n  LOGOUT = '[Login]  LogOut',\r\n  LOGIN_SUCCESS = '[Login] Login Success',\r\n  LOGIN_FAILURE = '[Login] Login Failure',\r\n  SIGNUP_SUCCESS = '[Login] SignUp Success',\r\n  SIGNUP_FAILURE = '[Login] SignUp Failure',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpFailure",
            "id": "class-SignUpFailure-46ca6a24061ef6b073b8425739c4796a",
            "file": "src/app/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../core/models/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Login] login',\r\n  SIGNUP = '[Login] signup',\r\n  LOGOUT = '[Login]  LogOut',\r\n  LOGIN_SUCCESS = '[Login] Login Success',\r\n  LOGIN_FAILURE = '[Login] Login Failure',\r\n  SIGNUP_SUCCESS = '[Login] SignUp Success',\r\n  SIGNUP_FAILURE = '[Login] SignUp Failure',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "any"
                    }
                ],
                "line": 36,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "any",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_FAILURE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "SignUpSuccess",
            "id": "class-SignUpSuccess-46ca6a24061ef6b073b8425739c4796a",
            "file": "src/app/store/actions/login.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { User } from '../../core/models/user';\r\n\r\nexport enum AuthActionTypes {\r\n  LOGIN = '[Login] login',\r\n  SIGNUP = '[Login] signup',\r\n  LOGOUT = '[Login]  LogOut',\r\n  LOGIN_SUCCESS = '[Login] Login Success',\r\n  LOGIN_FAILURE = '[Login] Login Failure',\r\n  SIGNUP_SUCCESS = '[Login] SignUp Success',\r\n  SIGNUP_FAILURE = '[Login] SignUp Failure',\r\n}\r\n\r\nexport class LogIn implements Action {\r\n  readonly type = AuthActionTypes.LOGIN;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class LogInSuccess implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_SUCCESS;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class LogInFailure implements Action {\r\n  readonly type = AuthActionTypes.LOGIN_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\n\r\nexport class SignUp implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpSuccess implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_SUCCESS;\r\n  constructor(public payload: User) {}\r\n}\r\nexport class SignUpFailure implements Action {\r\n  readonly type = AuthActionTypes.SIGNUP_FAILURE;\r\n  constructor(public payload: any) {}\r\n}\r\nexport class Logout implements Action {\r\n  readonly type = AuthActionTypes.LOGOUT;\r\n}\r\nexport type AuthAction =\r\n  | LogIn\r\n  | LogInSuccess\r\n  | LogInFailure\r\n  | SignUp\r\n  | SignUpSuccess\r\n  | SignUpFailure\r\n  | Logout;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "User"
                    }
                ],
                "line": 32,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "User",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "User",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "AuthActionTypes.SIGNUP_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "Update",
            "id": "class-Update-f24e3fdda5ea5e9bb665e5aa554235ae",
            "file": "src/app/store/actions/image.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Image } from '../../core/models/image';\r\n\r\nexport const ADD_IMAGE = '[Image] ADD';\r\nexport const GET_IMAGES = '[Image] GET';\r\nexport const UPDATE_IMAGE = '[Image] UPDATE';\r\nexport const DELETE_IMAGE = '[Image] DELETE';\r\nexport const DATA_LOAD = '[Image] LOAD';\r\n\r\nexport const ADD_IMAGE_SUCCESS = '[IMAGE] ADD IMAGE SUCCESS';\r\nexport const UPDATE_IMAGE_SUCCESS = '[IMAGE] UPDATE IMAGE SUCCESS';\r\nexport const DELETE_IMAGE_SUCCESS = '[IMAGE] DELETE IMAGE SUCCESS';\r\n\r\nexport class Add implements Action {\r\n  readonly type = ADD_IMAGE;\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class GetImages implements Action {\r\n  readonly type = GET_IMAGES;\r\n  constructor() {}\r\n}\r\nexport class Update implements Action {\r\n  readonly type = UPDATE_IMAGE;\r\n\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class Delete implements Action {\r\n  readonly type = DELETE_IMAGE;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class AddImageSuccess implements Action {\r\n  readonly type = ADD_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class UpdateImageSuccess implements Action {\r\n  readonly type = UPDATE_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class DeleteImageSuccess implements Action {\r\n  readonly type = DELETE_IMAGE_SUCCESS;\r\n}\r\n\r\nexport type ImageActions =\r\n  | Add\r\n  | GetImages\r\n  | Update\r\n  | Delete\r\n  | LoadDataSuccess\r\n  | UpdateImageSuccess\r\n  | AddImageSuccess\r\n  | DeleteImageSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Image"
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Image",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Image",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_IMAGE",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        },
        {
            "name": "UpdateImageSuccess",
            "id": "class-UpdateImageSuccess-f24e3fdda5ea5e9bb665e5aa554235ae",
            "file": "src/app/store/actions/image.actions.ts",
            "type": "class",
            "sourceCode": "import { Action } from '@ngrx/store';\r\nimport { Image } from '../../core/models/image';\r\n\r\nexport const ADD_IMAGE = '[Image] ADD';\r\nexport const GET_IMAGES = '[Image] GET';\r\nexport const UPDATE_IMAGE = '[Image] UPDATE';\r\nexport const DELETE_IMAGE = '[Image] DELETE';\r\nexport const DATA_LOAD = '[Image] LOAD';\r\n\r\nexport const ADD_IMAGE_SUCCESS = '[IMAGE] ADD IMAGE SUCCESS';\r\nexport const UPDATE_IMAGE_SUCCESS = '[IMAGE] UPDATE IMAGE SUCCESS';\r\nexport const DELETE_IMAGE_SUCCESS = '[IMAGE] DELETE IMAGE SUCCESS';\r\n\r\nexport class Add implements Action {\r\n  readonly type = ADD_IMAGE;\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class GetImages implements Action {\r\n  readonly type = GET_IMAGES;\r\n  constructor() {}\r\n}\r\nexport class Update implements Action {\r\n  readonly type = UPDATE_IMAGE;\r\n\r\n  constructor(public payload: Image) {}\r\n}\r\n\r\nexport class Delete implements Action {\r\n  readonly type = DELETE_IMAGE;\r\n  constructor(public payload: number) {}\r\n}\r\n\r\nexport class LoadDataSuccess implements Action {\r\n  readonly type = DATA_LOAD;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class AddImageSuccess implements Action {\r\n  readonly type = ADD_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class UpdateImageSuccess implements Action {\r\n  readonly type = UPDATE_IMAGE_SUCCESS;\r\n  constructor(public payload: Image) {}\r\n}\r\nexport class DeleteImageSuccess implements Action {\r\n  readonly type = DELETE_IMAGE_SUCCESS;\r\n}\r\n\r\nexport type ImageActions =\r\n  | Add\r\n  | GetImages\r\n  | Update\r\n  | Delete\r\n  | LoadDataSuccess\r\n  | UpdateImageSuccess\r\n  | AddImageSuccess\r\n  | DeleteImageSuccess;\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "payload",
                        "type": "Image"
                    }
                ],
                "line": 43,
                "jsdoctags": [
                    {
                        "name": "payload",
                        "type": "Image",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "properties": [
                {
                    "name": "payload",
                    "type": "Image",
                    "optional": false,
                    "description": "",
                    "line": 44,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "type",
                    "defaultValue": "UPDATE_IMAGE_SUCCESS",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        132
                    ]
                }
            ],
            "methods": [],
            "indexSignatures": [],
            "inputsClass": [],
            "outputsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "implements": [
                "Action"
            ]
        }
    ],
    "directives": [],
    "components": [
        {
            "name": "AddEditComponent",
            "id": "component-AddEditComponent-ff1c73ca961dcc752910294c67a07635",
            "file": "src/app/images/addEdit/add-edit.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-add-edit",
            "styleUrls": [
                "./add-edit.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./add-edit.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "edit",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "editForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        114
                    ]
                },
                {
                    "name": "image",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "imageData",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "isAuthUser",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 68
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 61
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { ImagesService } from 'src/app/core/services/images.service';\r\nimport { Add, GetImages, Update } from '../../store/actions/image.actions';\r\nimport { ImageState } from './../../store/image.state';\r\n\r\n@Component({\r\n  selector: 'app-add-edit',\r\n  templateUrl: './add-edit.component.html',\r\n  styleUrls: ['./add-edit.component.scss'],\r\n})\r\nexport class AddEditComponent implements OnInit {\r\n  edit = false;\r\n\r\n  image: any;\r\n\r\n  public editForm: FormGroup;\r\n\r\n  imageData: any;\r\n\r\n  submitted = false;\r\n\r\n  isAuthUser: boolean;\r\n\r\n  constructor(\r\n    private route: ActivatedRoute,\r\n\r\n    private router: Router,\r\n\r\n    private imgService: ImagesService,\r\n\r\n    private store: Store<ImageState>,\r\n\r\n    private fb: FormBuilder\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    this.editForm = this.fb.group({\r\n      id: [null, Validators.required],\r\n      name: [null, Validators.required],\r\n      description: [null, Validators.required],\r\n      imageUrl: [null, Validators.required],\r\n    });\r\n\r\n    const id = +this.route.snapshot.paramMap.get('id');\r\n    if (id) {\r\n      this.edit = true;\r\n    }\r\n\r\n    this.imgService.getImageDataById(id).subscribe((data) => {\r\n      this.editForm.setValue(data);\r\n    });\r\n  }\r\n\r\n  get form(): any {\r\n    return this.editForm.controls;\r\n  }\r\n\r\n  resetForm(): any {\r\n    this.editForm.controls['id'].setValue(this.image.id);\r\n    this.editForm.controls['name'].setValue(this.image.name);\r\n    this.editForm.controls['description'].setValue(this.image.description);\r\n    this.editForm.controls['imageUrl'].setValue('this.image.imageUrl');\r\n  }\r\n\r\n  onSubmit(): any {\r\n    this.submitted = true;\r\n    const newImage = this.editForm.value;\r\n    //add\r\n    if (!this.edit) {\r\n      this.store.dispatch(new Add(this.editForm.value));\r\n      this.store.dispatch(new GetImages());\r\n      this.router.navigate(['/image']);\r\n    } else {\r\n      this.store.dispatch(new Update(newImage));\r\n      this.store.dispatch(new GetImages());\r\n      window.alert('updated successfully');\r\n      this.router.navigate(['/image']);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "form {\r\n  display: grid;\r\n  padding: 1em;\r\n  background: #f9f9f9;\r\n  border: 1px solid #c1c1c1;\r\n  margin: 2rem auto 0 auto;\r\n  max-width: 600px;\r\n  padding: 1em;\r\n}\r\nform input {\r\n  background: #fff;\r\n  border: 1px solid #9c9c9c;\r\n}\r\nform button {\r\n  background: lightgrey;\r\n  padding: 0.7em;\r\n  width: 100%;\r\n  border: 0;\r\n}\r\nform button:hover {\r\n  background: gold;\r\n}\r\n\r\nlabel {\r\n  padding: 0.5em 0.5em 0.5em 0;\r\n}\r\n\r\ninput {\r\n  padding: 0.7em;\r\n  margin-bottom: 0.5rem;\r\n}\r\ninput:focus {\r\n  outline: 3px solid gold;\r\n}\r\n\r\n@media (min-width: 600px) {\r\n  form {\r\n    grid-template-columns: 200px 1fr;\r\n    grid-gap: 16px;\r\n  }\r\n\r\n  label {\r\n    text-align: right;\r\n    grid-column: 1 / 2;\r\n  }\r\n\r\n  input,\r\n  button {\r\n    grid-column: 2 / 3;\r\n  }\r\n}\r\n",
                    "styleUrl": "./add-edit.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "imgService",
                        "type": "ImagesService"
                    },
                    {
                        "name": "store",
                        "type": "Store<ImageState>"
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder"
                    }
                ],
                "line": 25,
                "jsdoctags": [
                    {
                        "name": "route",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imgService",
                        "type": "ImagesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<ImageState>",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "form": {
                    "name": "form",
                    "getSignature": {
                        "name": "form",
                        "type": "any",
                        "returnType": "any",
                        "line": 57
                    }
                }
            },
            "templateData": "<form class=\"form1\" [formGroup]=\"editForm\" (ngSubmit)=\"onSubmit()\">\r\n  <h4 *ngIf=\"!edit\">Add Form</h4>\r\n  <h4 *ngIf=\"edit\">Edit Form</h4>\r\n\r\n  <label for=\"id\">Id</label>\r\n  <input type=\"text\" id=\"id\" formControlName=\"id\" aria-label=\"id\" />\r\n  <span *ngIf=\"submitted && form.id.errors\" class=\"errMsg\">\r\n    <span *ngIf=\"form.errors.required\">Id is required</span>\r\n  </span>\r\n\r\n  <label for=\"name\">Name</label>\r\n  <input type=\"text\" id=\"name\" formControlName=\"name\" aria-label=\"name\" />\r\n  <span *ngIf=\"submitted && form.name.errors\" class=\"errMsg\">\r\n    <span *ngIf=\"form.errors.required\">Name is required</span>\r\n  </span>\r\n\r\n  <label for=\"description\">Description</label>\r\n  <input type=\"text\" id=\"description\" formControlName=\"description\" aria-label=\"Description\" />\r\n  <span *ngIf=\"submitted && form.description.errors\" class=\"errMsg\">\r\n    <span *ngIf=\"form.description.errors.required\">Description is required</span>\r\n  </span>\r\n\r\n  <label for=\"images\">Images</label>\r\n  <input type=\"text\" id=\"images\" type=\"text\" formControlName=\"imageUrl\" aria-label=\"image\" />\r\n  <span *ngIf=\"submitted && form.description.imageUrl\" class=\"errMsg\">\r\n    <span *ngIf=\"form.imageUrl.errors.required\">Image is required</span>\r\n  </span>\r\n\r\n  <button type=\"submit\" aria-label=\"save\">Save</button>\r\n  <button type=\"submit\" (click)=\"resetForm()\" aria-label=\"Reset\">Reset</button>\r\n</form>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-03cb9b43c500163d96657abb7d87eecc",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "setMode",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "title",
                    "defaultValue": "'images'",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "methodsClass": [
                {
                    "name": "receiveMode",
                    "args": [
                        {
                            "name": "$event",
                            "type": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 11,
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent {\r\n  setMode = false;\r\n  title = 'images';\r\n  receiveMode($event): any {\r\n    this.setMode = $event;\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<div id=\"main-container\" [ngClass]=\"[setMode ? 'darkTheme' : '']\">\r\n  <app-header (mode)=\"receiveMode($event)\"></app-header>\r\n  <router-outlet></router-outlet>\r\n</div>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-44f2f1e1b3a1e0ebc1e0edafd90d05c0",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "description": "<p>What background color to use</p>\n",
                    "line": 26,
                    "type": "string"
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "description": "<p>Button contents</p>\n",
                    "line": 40
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 20
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 32,
                    "type": "\"small\" | \"medium\" | \"large\""
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 46,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport default class ButtonComponent {\r\n  /**\r\n   * Is this the principal call to action on the page?\r\n   */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /**\r\n   * What background color to use\r\n   */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /**\r\n   * How large should the button be?\r\n   */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /**\r\n   * Optional click handler\r\n   */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-weight: 700;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  cursor: pointer;\r\n  display: inline-block;\r\n  line-height: 1;\r\n}\r\n.storybook-button--primary {\r\n  color: white;\r\n  background-color: #1ea7fd;\r\n}\r\n.storybook-button--secondary {\r\n  color: #333;\r\n  background-color: transparent;\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n}\r\n.storybook-button--small {\r\n  font-size: 12px;\r\n  padding: 10px 16px;\r\n}\r\n.storybook-button--medium {\r\n  font-size: 14px;\r\n  padding: 11px 20px;\r\n}\r\n.storybook-button--large {\r\n  font-size: 16px;\r\n  padding: 12px 24px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 48
                    }
                }
            }
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c349aa42f2121da4b5737d60a50fa413",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"wrapper\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          primary\n          size=\"small\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 53,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 62,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 56,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  template: `<header>\r\n    <div class=\"wrapper\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <storybook-button\r\n          *ngIf=\"user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogout.emit($event)\"\r\n          label=\"Log out\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          size=\"small\"\r\n          (onClick)=\"onLogin.emit($event)\"\r\n          label=\"Log in\"\r\n        ></storybook-button>\r\n        <storybook-button\r\n          *ngIf=\"!user\"\r\n          primary\r\n          size=\"small\"\r\n          (onClick)=\"onCreateAccount.emit($event)\"\r\n          label=\"Sign up\"\r\n        ></storybook-button>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport default class HeaderComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".wrapper {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-between;\r\n}\r\n\r\nsvg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nh1 {\r\n  font-weight: 900;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n  margin: 6px 0 6px 10px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\nbutton + button {\r\n  margin-left: 10px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-c85d01e3d83f1a223efec04d42107eb2-1",
            "file": "src/app/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [
                "./header.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "mode",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "line": 14,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "isAuthenticated",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "isAuthUser",
                    "defaultValue": "true",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "isLogout",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "setDark",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "type": "null",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34
                },
                {
                    "name": "onChangeToggle",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 42
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, OnInit, Output } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { Logout } from '../store/actions/login.actions';\r\nimport { AppState, selectAuthState } from '../store/app.state';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.scss'],\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n  @Output() mode = new EventEmitter<boolean>();\r\n\r\n  setDark = false;\r\n\r\n  isAuthUser: boolean = true;\r\n\r\n  isLogout: boolean;\r\n\r\n  user = null;\r\n\r\n  errorMessage: string;\r\n\r\n  getState: Observable<any>;\r\n\r\n  isAuthenticated: false;\r\n\r\n  constructor(private router: Router, private store: Store<AppState>) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getState.subscribe((state) => {\r\n      this.isAuthenticated = state.isAuthenticated;\r\n      this.user = state.user;\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n  }\r\n\r\n  onChangeToggle(): any {\r\n    this.setDark = !this.setDark;\r\n    this.mode.emit(this.setDark);\r\n  }\r\n\r\n  logout() {\r\n    this.store.dispatch(new Logout());\r\n    this.router.navigate(['/image']);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login {\r\n  background-color: #e7e7e7;\r\n  color: black;\r\n\r\n  width: 50%;\r\n  height: 0;\r\n}\r\n\r\n#log {\r\n  width: 100px;\r\n  height: 30px;\r\n  border: none;\r\n  border-radius: 17px;\r\n  padding-left: 7px;\r\n  color: blue;\r\n  background-color: white;\r\n}\r\n\r\n//css for toggle button\r\n.switch {\r\n  position: relative;\r\n  display: inline-block;\r\n  width: 60px;\r\n  height: 34px;\r\n}\r\n\r\n.switch input {\r\n  opacity: 0;\r\n  width: 0;\r\n  height: 0;\r\n}\r\n\r\n.slider {\r\n  position: absolute;\r\n  cursor: pointer;\r\n  top: 0;\r\n  left: 0;\r\n  right: 0;\r\n  bottom: 0;\r\n  background-color: #ccc;\r\n  -webkit-transition: 0.4s;\r\n  transition: 0.4s;\r\n}\r\n\r\n.slider:before {\r\n  position: absolute;\r\n  content: '';\r\n  height: 26px;\r\n  width: 26px;\r\n  left: 4px;\r\n  bottom: 4px;\r\n  background-color: white;\r\n  -webkit-transition: 0.4s;\r\n  transition: 0.4s;\r\n}\r\n\r\ninput:checked + .slider {\r\n  background-color: #2196f3;\r\n}\r\n\r\ninput:focus + .slider {\r\n  box-shadow: 0 0 1px #2196f3;\r\n}\r\n\r\ninput:checked + .slider:before {\r\n  -webkit-transform: translateX(26px);\r\n  -ms-transform: translateX(26px);\r\n  transform: translateX(26px);\r\n}\r\n\r\n/* Rounded sliders */\r\n.slider.round {\r\n  border-radius: 34px;\r\n}\r\n\r\n.slider.round:before {\r\n  border-radius: 50%;\r\n}\r\n",
                    "styleUrl": "./header.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 28,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\" />\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n    <title>Document</title>\r\n  </head>\r\n  <body>\r\n    <header class=\"darkTheme\" [ngClass]=\"{ 'theme-light': setDark }\">\r\n      <h2 tabindex=\"1\" aria-label=\"heading for app\">Images</h2>\r\n\r\n      <div class=\"spacer\"></div>\r\n\r\n      <div>\r\n        <button\r\n          id=\"log\"\r\n          [routerLink]=\"'/login'\"\r\n          tabindex=\"1\"\r\n          aria-label=\"Login\"\r\n          *ngIf=\"!isAuthenticated\"\r\n        >\r\n          Sign in\r\n        </button>\r\n        &nbsp; &nbsp;\r\n        <button id=\"log\" [routerLink]=\"'/signup'\" aria-label=\"SignUP\" *ngIf=\"!isAuthenticated\">\r\n          Sign up\r\n        </button>\r\n        &nbsp; &nbsp;\r\n        <button class=\"logout\" (click)=\"logout()\" aria-label=\"LogOut\" *ngIf=\"isAuthenticated\">\r\n          Log Out\r\n        </button>\r\n      </div>\r\n      <span></span>\r\n      <label class=\"switch\">\r\n        <input type=\"checkbox\" checked aria-label=\"change theme\" (click)=\"onChangeToggle()\" />\r\n        <span class=\"slider round\"></span>\r\n      </label>\r\n    </header>\r\n  </body>\r\n</html>\r\n"
        },
        {
            "name": "ImagesListComponent",
            "id": "component-ImagesListComponent-dd4097eb68c16e1ff1b889b9232cefa8",
            "file": "src/app/images/images.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-images",
            "styleUrls": [
                "./images.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./images.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "images",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "isAuthenticated",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "methodsClass": [
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "id",
                            "type": "number"
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 54,
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "number",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllImages",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { ImagesService } from '../core/services/images.service';\r\n//import * as ImageAction from '../store/actions/image.actions';\r\nimport { AppState, selectAuthState } from '../store/app.state';\r\nimport { Delete, GetImages } from './../store/actions/image.actions';\r\n\r\n@Component({\r\n  selector: 'app-images',\r\n  templateUrl: './images.component.html',\r\n  styleUrls: ['./images.component.scss'],\r\n})\r\nexport class ImagesListComponent implements OnInit {\r\n  images: any;\r\n\r\n  getState: Observable<any>;\r\n\r\n  // isAuthUser: boolean;\r\n\r\n  isAuthenticated: boolean;\r\n  errorMessage: string | null;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private imgService: ImagesService,\r\n    private _routeParams: ActivatedRoute,\r\n    private store: Store<AppState>\r\n  ) {\r\n    // this.isAuthUser = _routeParams.snapshot.params['isAuthUser'];\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.getAllImages();\r\n    this.getState.subscribe((state) => {\r\n      this.isAuthenticated = state.isAuthenticated;\r\n      this.images = state.image;\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n  }\r\n  getAllImages() {\r\n    this.store.dispatch(new GetImages());\r\n    this.store.subscribe(\r\n      (data) => {\r\n        this.images = data.image.image;\r\n      },\r\n      (error) => {\r\n        window.alert(error.status);\r\n      }\r\n    );\r\n  }\r\n  delete(id: number): any {\r\n    const confirmation = window.confirm('Are you sure you want to delete this image?');\r\n    if (confirmation) {\r\n      this.store.dispatch(new Delete(id));\r\n      this.store.dispatch(new GetImages());\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".table td,\r\n.table th {\r\n  vertical-align: middle;\r\n  text-align: center;\r\n}\r\nimg {\r\n  height: 100px;\r\n  width: auto;\r\n}\r\n.delete {\r\n  background: red;\r\n}\r\nbutton:disabled {\r\n  background-color: lightgray;\r\n  color: grey;\r\n}\r\n.addImageBtn {\r\n  float: right;\r\n  width: 10%;\r\n  background-color: #2196f3;\r\n}\r\n",
                    "styleUrl": "./images.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "imgService",
                        "type": "ImagesService"
                    },
                    {
                        "name": "_routeParams",
                        "type": "ActivatedRoute"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 23,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "imgService",
                        "type": "ImagesService",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "_routeParams",
                        "type": "ActivatedRoute",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "templateData": "<div>\r\n  <button routerLink=\"/addEdit\" *ngIf=\"isAuthenticated\" class=\"addImageBtn\">Add Image</button>\r\n</div>\r\n<table>\r\n  <thead class=\"thead-dark\">\r\n    <tr>\r\n      <th tabindex=\"0\">ID</th>\r\n      <th tabindex=\"0\">Name</th>\r\n      <th tabindex=\"0\">Description</th>\r\n      <th tabindex=\"0\">Images</th>\r\n      <th colspan=\"2\" *ngIf=\"isAuthenticated\">Actions</th>\r\n    </tr>\r\n  </thead>\r\n\r\n  <tr *ngFor=\"let img of images\">\r\n    <td tabindex=\"0\">\r\n      {{ img.id }}\r\n    </td>\r\n    <td tabindex=\"0\">\r\n      {{ img.name }}\r\n    </td>\r\n    <td tabindex=\"0\">\r\n      {{ img.description }}\r\n    </td>\r\n    <td tabindex=\"0\"><img src=\"{{ img.imageUrl }}\" alt=\"Nature\" /></td>\r\n    <td tabindex=\"0\" *ngIf=\"isAuthenticated\">\r\n      <button routerLink=\"/addEdit/{{ img.id }}\">\r\n        Edit\r\n      </button>\r\n    </td>\r\n    <td tabindex=\"0\" *ngIf=\"isAuthenticated\">\r\n      <button class=\"delete\" (click)=\"delete(img.id)\">Delete</button>\r\n    </td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-834b7cfdcbfe35d9483edc1508795d8e",
            "file": "src/app/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [
                "./login.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string | null",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "images",
                    "type": "any",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "isAuthUser",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "loginForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "username",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 55
                },
                {
                    "name": "setLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { LogIn } from '../store/actions/login.actions';\r\nimport { AppState, selectAuthState } from './../store/app.state';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss'],\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  images: any;\r\n\r\n  username: string;\r\n\r\n  loginForm: FormGroup;\r\n\r\n  submitted = false;\r\n\r\n  isAuthUser: boolean;\r\n\r\n  getState: Observable<any>;\r\n\r\n  errorMessage: string | null;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private store: Store<AppState>\r\n  ) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.setLoginForm();\r\n    this.getState.subscribe((state) => {\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n    this.errorMessage = undefined;\r\n  }\r\n\r\n  setLoginForm(): void {\r\n    this.loginForm = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required],\r\n    });\r\n  }\r\n  get form(): any {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  onSubmit(): any {\r\n    this.submitted = true;\r\n    const userData = this.loginForm.value;\r\n    this.store.dispatch(new LogIn(userData));\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "h2 {\r\n  text-align: center;\r\n  color: #277582;\r\n  padding: 20px;\r\n}\r\nlabel {\r\n  color: white;\r\n  font-size: 17px;\r\n}\r\n\r\nspan {\r\n  color: white;\r\n  font-size: 17px;\r\n}\r\na {\r\n  float: right;\r\n  background-color: grey;\r\n}\r\n",
                    "styleUrl": "./login.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 27,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "form": {
                    "name": "form",
                    "getSignature": {
                        "name": "form",
                        "type": "any",
                        "returnType": "any",
                        "line": 51
                    }
                }
            },
            "templateData": "<div class=\"login\">\r\n  <div *ngIf=\"errorMessage\" class=\"errMsg\">\r\n    {{ errorMessage }}\r\n  </div>\r\n  <form id=\"login\" [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n    <label for=\"username\">User Name </label>\r\n    <input\r\n      formControlName=\"username\"\r\n      type=\"text\"\r\n      name=\"username\"\r\n      class=\"Username\"\r\n      placeholder=\" Enter Username\"\r\n      aria-label=\"username\"\r\n    />\r\n    <span *ngIf=\"submitted && form.username.errors\" class=\"errMsg\">\r\n      <span *ngIf=\"form.username.errors.required\" class=\"errMsg\">Username is required</span>\r\n    </span>\r\n\r\n    <br />\r\n    <br />\r\n    <label for=\"password\"><b>Password </b> </label>\r\n    <input\r\n      formControlName=\"password\"\r\n      type=\"Password\"\r\n      name=\"password\"\r\n      class=\"Username\"\r\n      placeholder=\"Enter Password\"\r\n      aria-label=\"password\"\r\n    />\r\n    <span *ngIf=\"submitted && form.password.errors\" class=\"errMsg\">\r\n      <span *ngIf=\"form.password.errors.required\" class=\"errMsg\">Password is required</span>\r\n    </span>\r\n\r\n    <br />\r\n    <br />\r\n    <button type=\"submit\" name=\"log\" id=\"log\" value=\"Log In \">\r\n      Log In\r\n    </button>\r\n    <br /><br />\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-caf3f2fce2bf7356cf7ccd76b8a88482",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"onLogout.emit($event)\"\n      (onLogin)=\"onLogin.emit($event)\"\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\n    ></storybook-header>\n    <section>\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Learn Storybook\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\n          docs\n        </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "line": 66,
                    "type": "unknown"
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"onLogout.emit($event)\"\r\n      (onLogin)=\"onLogin.emit($event)\"\r\n      (onCreateAccount)=\"onCreateAccount.emit($event)\"\r\n    ></storybook-header>\r\n    <section>\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://www.learnstorybook.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Learn Storybook\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          docs\r\n        </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport default class PageComponent {\r\n  @Input()\r\n  user: unknown = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n\r\n// export const Page = ({ user, onLogin, onLogout, onCreateAccount }) => (\r\n//   <article>\r\n//     <Header user={user} onLogin={onLogin} onLogout={onLogout} onCreateAccount={onCreateAccount} />\r\n\r\n// );\r\n// Page.propTypes = {\r\n//   user: PropTypes.shape({}),\r\n//   onLogin: PropTypes.func.isRequired,\r\n//   onLogout: PropTypes.func.isRequired,\r\n//   onCreateAccount: PropTypes.func.isRequired,\r\n// };\r\n\r\n// Page.defaultProps = {\r\n//   user: null,\r\n// };\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "section {\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  padding: 48px 20px;\r\n  margin: 0 auto;\r\n  max-width: 600px;\r\n  color: #333;\r\n}\r\n\r\nh2 {\r\n  font-weight: 900;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n  margin: 0 0 4px;\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\np {\r\n  margin: 1em 0;\r\n}\r\n\r\na {\r\n  text-decoration: none;\r\n  color: #1ea7fd;\r\n}\r\n\r\nul {\r\n  padding-left: 30px;\r\n  margin: 1em 0;\r\n}\r\n\r\nli {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.tip {\r\n  display: inline-block;\r\n  border-radius: 1em;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n  font-weight: 700;\r\n  background: #e7fdd8;\r\n  color: #66bf3c;\r\n  padding: 4px 12px;\r\n  margin-right: 10px;\r\n  vertical-align: top;\r\n}\r\n\r\n.tip-wrapper {\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n}\r\n\r\n.tip-wrapper svg {\r\n  display: inline-block;\r\n  height: 12px;\r\n  width: 12px;\r\n  margin-right: 4px;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n}\r\n\r\n.tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": ""
        },
        {
            "name": "SignUpComponent",
            "id": "component-SignUpComponent-211de253f3759240e7aed6c15f74d501",
            "file": "src/app/sign-up/sign-up.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sign-up",
            "styleUrls": [
                "./sign-up.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./sign-up.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "errorMessage",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "getState",
                    "type": "Observable<any>",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "isAuthUser",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "signUpForm",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "submitted",
                    "defaultValue": "false",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "users",
                    "type": "Observable<User[]>",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51
                }
            ],
            "hostBindings": [],
            "hostListeners": [],
            "description": "",
            "rawdescription": "",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Store } from '@ngrx/store';\r\nimport { Observable } from 'rxjs';\r\nimport { User } from '../core/models/user';\r\nimport { SignUp } from '../store/actions/login.actions';\r\nimport { AppState, selectAuthState } from '../store/app.state';\r\n\r\n@Component({\r\n  selector: 'app-sign-up',\r\n  templateUrl: './sign-up.component.html',\r\n  styleUrls: ['./sign-up.component.scss'],\r\n})\r\nexport class SignUpComponent implements OnInit {\r\n  users: Observable<User[]>;\r\n\r\n  errorMessage: string;\r\n\r\n  signUpForm: FormGroup;\r\n\r\n  submitted = false;\r\n\r\n  getState: Observable<any>;\r\n\r\n  isAuthUser: boolean;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private formBuilder: FormBuilder,\r\n    private store: Store<AppState>\r\n  ) {\r\n    this.getState = this.store.select(selectAuthState);\r\n  }\r\n\r\n  ngOnInit(): void {\r\n    this.signUpForm = this.formBuilder.group({\r\n      username: ['', Validators.required],\r\n      password: ['', Validators.required],\r\n    });\r\n    this.getState.subscribe((state) => {\r\n      this.errorMessage = state.errorMessage;\r\n    });\r\n    this.errorMessage = null;\r\n  }\r\n\r\n  get form(): any {\r\n    return this.signUpForm.controls;\r\n  }\r\n\r\n  onSubmit(): any {\r\n    this.submitted = true;\r\n    const user = this.signUpForm.value;\r\n    if (this.signUpForm.invalid) {\r\n      return alert('the form is not valid');\r\n    } else {\r\n      this.store.dispatch(new SignUp(user));\r\n      window.alert('Registered Successfully');\r\n      this.router.navigate(['/image']);\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "body {\r\n  margin: 0;\r\n  padding: 0;\r\n  background-color: #6abadeba;\r\n  font-family: 'Arial';\r\n}\r\n\r\nh2 {\r\n  text-align: center;\r\n  color: #277582;\r\n  padding: 20px;\r\n}\r\nlabel {\r\n  color: white;\r\n  font-size: 17px;\r\n}\r\nbutton {\r\n  background-color: #24d529;\r\n  color: white;\r\n  font-weight: 300;\r\n  height: 30px;\r\n}\r\n\r\nspan {\r\n  color: white;\r\n  font-size: 17px;\r\n}\r\na {\r\n  float: right;\r\n  background-color: grey;\r\n}\r\n",
                    "styleUrl": "./sign-up.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router"
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder"
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>"
                    }
                ],
                "line": 26,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formBuilder",
                        "type": "FormBuilder",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store<AppState>",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "form": {
                    "name": "form",
                    "getSignature": {
                        "name": "form",
                        "type": "any",
                        "returnType": "any",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"login\">\r\n  <div *ngIf=\"errorMessage\" class=\"errMsg\">\r\n    {{ errorMessage }}\r\n  </div>\r\n  <form id=\"login\" [formGroup]=\"signUpForm\" (ngSubmit)=\"onSubmit()\">\r\n    <label for=\"username\">User Name </label>\r\n    <input\r\n      type=\"text\"\r\n      name=\"Username\"\r\n      class=\"Username\"\r\n      formControlName=\"username\"\r\n      placeholder=\"Username\"\r\n      [ngClass]=\"{ 'is-invalid': submitted && form.username.errors }\"\r\n      tabindex=\"1\"\r\n      aria-label=\"username\"\r\n    />\r\n    <span *ngIf=\"submitted && form.username.errors\" class=\"errMsg\">\r\n      <span *ngIf=\"form.username.errors.required\">Username is required</span>\r\n    </span>\r\n\r\n    <br /><br />\r\n    <label for=\"password\">Password</label><br />\r\n    <input\r\n      type=\"Password\"\r\n      name=\"Pass\"\r\n      class=\"Username\"\r\n      placeholder=\"Password\"\r\n      formControlName=\"password\"\r\n      aria-label=\"password\"\r\n      [ngClass]=\"{ 'is-invalid': submitted && form.password.errors }\"\r\n    />\r\n    <span *ngIf=\"submitted && form.password.errors\" class=\"errMsg\">\r\n      <span *ngIf=\"form.password.errors.required\">Password is required</span>\r\n    </span>\r\n\r\n    <br /><br />\r\n    <button type=\"submit\" name=\"log\" id=\"log\">sign Up</button>\r\n    <br /><br />\r\n  </form>\r\n</div>\r\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AddEditComponent"
                        },
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ImagesListComponent"
                        },
                        {
                            "name": "LoginComponent"
                        },
                        {
                            "name": "SignUpComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "ADD_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/image.actions.ts",
                "type": "string",
                "defaultValue": "'[Image] ADD'"
            },
            {
                "name": "ADD_IMAGE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/image.actions.ts",
                "type": "string",
                "defaultValue": "'[IMAGE] ADD IMAGE SUCCESS'"
            },
            {
                "name": "configureTests",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/test-config.helper.ts",
                "type": "",
                "defaultValue": "(\r\n  configure: ConfigureFn,\r\n  compilerOptions: CompilerOptions = {}\r\n) => {\r\n  const compilerConfig: CompilerOptions = {\r\n    preserveWhitespaces: false,\r\n    ...compilerOptions,\r\n  };\r\n\r\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\r\n\r\n  configure(configuredTestBed);\r\n\r\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\r\n}"
            },
            {
                "name": "DATA_LOAD",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/image.actions.ts",
                "type": "string",
                "defaultValue": "'[Image] LOAD'"
            },
            {
                "name": "DELETE_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/image.actions.ts",
                "type": "string",
                "defaultValue": "'[Image] DELETE'"
            },
            {
                "name": "DELETE_IMAGE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/image.actions.ts",
                "type": "string",
                "defaultValue": "'[IMAGE] DELETE IMAGE SUCCESS'"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "type": "object",
                "defaultValue": "{\r\n  production: true\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "type": "object",
                "defaultValue": "{\r\n  baseURL: 'http://localhost:3000/',\r\n  production: false,\r\n}"
            },
            {
                "name": "GET_IMAGES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/image.actions.ts",
                "type": "string",
                "defaultValue": "'[Image] GET'"
            },
            {
                "name": "imageState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('image')"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/image.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  image: [],\r\n  message: null,\r\n  success: null,\r\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/reducers/login.reducer.ts",
                "type": "State",
                "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n}"
            },
            {
                "name": "Large",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedIn",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "LoggedOut",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "reducers",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "object",
                "defaultValue": "{\r\n  auth: auth.reducer,\r\n  image: image.imageReducer,\r\n}"
            },
            {
                "name": "Secondary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/app.state.ts",
                "type": "",
                "defaultValue": "createFeatureSelector<AppState>('auth')"
            },
            {
                "name": "Small",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "",
                "defaultValue": "Template.bind({})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Button.stories.ts",
                "type": "Story<Button>",
                "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Header.stories.ts",
                "type": "Story<Header>",
                "defaultValue": "(args: Header) => ({\r\n  component: Header,\r\n  props: args,\r\n})"
            },
            {
                "name": "Template",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/stories/Page.stories.ts",
                "type": "Story<Page>",
                "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
            },
            {
                "name": "UPDATE_IMAGE",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/image.actions.ts",
                "type": "string",
                "defaultValue": "'[Image] UPDATE'"
            },
            {
                "name": "UPDATE_IMAGE_SUCCESS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/store/actions/image.actions.ts",
                "type": "string",
                "defaultValue": "'[IMAGE] UPDATE IMAGE SUCCESS'"
            }
        ],
        "functions": [
            {
                "name": "imageReducer",
                "file": "src/app/store/reducers/image.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state"
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "reducer",
                "file": "src/app/store/reducers/login.reducer.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "description": "",
                "args": [
                    {
                        "name": "state",
                        "type": ""
                    },
                    {
                        "name": "action"
                    }
                ],
                "returnType": "State",
                "jsdoctags": [
                    {
                        "name": "state",
                        "type": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "action",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "AuthAction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | Logout",
                "file": "src/app/store/actions/login.actions.ts",
                "description": "",
                "kind": 168
            },
            {
                "name": "CompilerOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Partial<literal type>",
                "file": "src/test-config.helper.ts",
                "description": "",
                "kind": 161
            },
            {
                "name": "ConfigureFn",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "function",
                "file": "src/test-config.helper.ts",
                "description": "",
                "kind": 162
            },
            {
                "name": "ImageActions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Add | GetImages | Update | Delete | LoadDataSuccess | UpdateImageSuccess | AddImageSuccess | DeleteImageSuccess",
                "file": "src/app/store/actions/image.actions.ts",
                "description": "",
                "kind": 168
            }
        ],
        "enumerations": [
            {
                "name": "AuthActionTypes",
                "childs": [
                    {
                        "name": "LOGIN",
                        "value": "[Login] login"
                    },
                    {
                        "name": "SIGNUP",
                        "value": "[Login] signup"
                    },
                    {
                        "name": "LOGOUT",
                        "value": "[Login]  LogOut"
                    },
                    {
                        "name": "LOGIN_SUCCESS",
                        "value": "[Login] Login Success"
                    },
                    {
                        "name": "LOGIN_FAILURE",
                        "value": "[Login] Login Failure"
                    },
                    {
                        "name": "SIGNUP_SUCCESS",
                        "value": "[Login] SignUp Success"
                    },
                    {
                        "name": "SIGNUP_FAILURE",
                        "value": "[Login] SignUp Failure"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "description": "",
                "file": "src/app/store/actions/login.actions.ts"
            }
        ],
        "groupedVariables": {
            "src/app/store/actions/image.actions.ts": [
                {
                    "name": "ADD_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/image.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Image] ADD'"
                },
                {
                    "name": "ADD_IMAGE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/image.actions.ts",
                    "type": "string",
                    "defaultValue": "'[IMAGE] ADD IMAGE SUCCESS'"
                },
                {
                    "name": "DATA_LOAD",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/image.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Image] LOAD'"
                },
                {
                    "name": "DELETE_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/image.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Image] DELETE'"
                },
                {
                    "name": "DELETE_IMAGE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/image.actions.ts",
                    "type": "string",
                    "defaultValue": "'[IMAGE] DELETE IMAGE SUCCESS'"
                },
                {
                    "name": "GET_IMAGES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/image.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Image] GET'"
                },
                {
                    "name": "UPDATE_IMAGE",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/image.actions.ts",
                    "type": "string",
                    "defaultValue": "'[Image] UPDATE'"
                },
                {
                    "name": "UPDATE_IMAGE_SUCCESS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/actions/image.actions.ts",
                    "type": "string",
                    "defaultValue": "'[IMAGE] UPDATE IMAGE SUCCESS'"
                }
            ],
            "src/test-config.helper.ts": [
                {
                    "name": "configureTests",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/test-config.helper.ts",
                    "type": "",
                    "defaultValue": "(\r\n  configure: ConfigureFn,\r\n  compilerOptions: CompilerOptions = {}\r\n) => {\r\n  const compilerConfig: CompilerOptions = {\r\n    preserveWhitespaces: false,\r\n    ...compilerOptions,\r\n  };\r\n\r\n  const configuredTestBed = TestBed.configureCompiler(compilerConfig);\r\n\r\n  configure(configuredTestBed);\r\n\r\n  return configuredTestBed.compileComponents().then(() => configuredTestBed);\r\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  baseURL: 'http://localhost:3000/',\r\n  production: false,\r\n}"
                }
            ],
            "src/app/store/app.state.ts": [
                {
                    "name": "imageState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('image')"
                },
                {
                    "name": "reducers",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "object",
                    "defaultValue": "{\r\n  auth: auth.reducer,\r\n  image: image.imageReducer,\r\n}"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/app.state.ts",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AppState>('auth')"
                }
            ],
            "src/app/store/reducers/image.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/image.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  image: [],\r\n  message: null,\r\n  success: null,\r\n}"
                }
            ],
            "src/app/store/reducers/login.reducer.ts": [
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/store/reducers/login.reducer.ts",
                    "type": "State",
                    "defaultValue": "{\r\n  isAuthenticated: false,\r\n  user: null,\r\n  errorMessage: null,\r\n}"
                }
            ],
            "src/stories/Button.stories.ts": [
                {
                    "name": "Large",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Secondary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Small",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Button.stories.ts",
                    "type": "Story<Button>",
                    "defaultValue": "(args: Button) => ({\r\n  component: Button,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Header.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Header.stories.ts",
                    "type": "Story<Header>",
                    "defaultValue": "(args: Header) => ({\r\n  component: Header,\r\n  props: args,\r\n})"
                }
            ],
            "src/stories/Page.stories.ts": [
                {
                    "name": "LoggedIn",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "LoggedOut",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "",
                    "defaultValue": "Template.bind({})"
                },
                {
                    "name": "Template",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/stories/Page.stories.ts",
                    "type": "Story<Page>",
                    "defaultValue": "(args: Page) => ({\r\n  component: Page,\r\n  props: args,\r\n})"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/store/reducers/image.reducer.ts": [
                {
                    "name": "imageReducer",
                    "file": "src/app/store/reducers/image.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state"
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "src/app/store/reducers/login.reducer.ts": [
                {
                    "name": "reducer",
                    "file": "src/app/store/reducers/login.reducer.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "description": "",
                    "args": [
                        {
                            "name": "state",
                            "type": ""
                        },
                        {
                            "name": "action"
                        }
                    ],
                    "returnType": "State",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "action",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/store/actions/login.actions.ts": [
                {
                    "name": "AuthActionTypes",
                    "childs": [
                        {
                            "name": "LOGIN",
                            "value": "[Login] login"
                        },
                        {
                            "name": "SIGNUP",
                            "value": "[Login] signup"
                        },
                        {
                            "name": "LOGOUT",
                            "value": "[Login]  LogOut"
                        },
                        {
                            "name": "LOGIN_SUCCESS",
                            "value": "[Login] Login Success"
                        },
                        {
                            "name": "LOGIN_FAILURE",
                            "value": "[Login] Login Failure"
                        },
                        {
                            "name": "SIGNUP_SUCCESS",
                            "value": "[Login] SignUp Success"
                        },
                        {
                            "name": "SIGNUP_FAILURE",
                            "value": "[Login] SignUp Failure"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "description": "",
                    "file": "src/app/store/actions/login.actions.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/store/actions/login.actions.ts": [
                {
                    "name": "AuthAction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "LogIn | LogInSuccess | LogInFailure | SignUp | SignUpSuccess | SignUpFailure | Logout",
                    "file": "src/app/store/actions/login.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ],
            "src/test-config.helper.ts": [
                {
                    "name": "CompilerOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Partial<literal type>",
                    "file": "src/test-config.helper.ts",
                    "description": "",
                    "kind": 161
                },
                {
                    "name": "ConfigureFn",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "function",
                    "file": "src/test-config.helper.ts",
                    "description": "",
                    "kind": 162
                }
            ],
            "src/app/store/actions/image.actions.ts": [
                {
                    "name": "ImageActions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Add | GetImages | Update | Delete | LoadDataSuccess | UpdateImageSuccess | AddImageSuccess | DeleteImageSuccess",
                    "file": "src/app/store/actions/image.actions.ts",
                    "description": "",
                    "kind": 168
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "",
                        "component": "ImagesListComponent"
                    },
                    {
                        "path": "login",
                        "component": "LoginComponent"
                    },
                    {
                        "path": "signup",
                        "component": "SignUpComponent"
                    },
                    {
                        "path": "image",
                        "component": "ImagesListComponent"
                    },
                    {
                        "path": "addEdit",
                        "component": "AddEditComponent"
                    },
                    {
                        "path": "addEdit/:id",
                        "component": "AddEditComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "e2e/src/app.po.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AppPage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/image.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Image",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/images.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImagesService",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/images/addEdit/add-edit.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AddEditComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/images/images.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImagesListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/sign-up/sign-up.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SignUpComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Add",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "AddImageSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Delete",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "DeleteImageSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "GetImages",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LoadDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Update",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "UpdateImageSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_IMAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "ADD_IMAGE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DATA_LOAD",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_IMAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "DELETE_IMAGE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GET_IMAGES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_IMAGE",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/image.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "UPDATE_IMAGE_SUCCESS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogIn",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "LogInSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "Logout",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUp",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpFailure",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/actions/login.actions.ts",
                "type": "class",
                "linktype": "classe",
                "name": "SignUpSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AppState",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "imageState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reducers",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/app.state.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 11,
                "coverageCount": "1/9",
                "status": "low"
            },
            {
                "filePath": "src/app/store/effects/image.effect.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ImageEffects",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/store/image.state.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ImageState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/image.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/image.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "imageReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/image.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/login.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "State",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/login.reducer.ts",
                "type": "function",
                "linksubtype": "function",
                "name": "reducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/store/reducers/login.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Large",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Secondary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Small",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Header.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedIn",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "LoggedOut",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/Page.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Template",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/test-config.helper.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "configureTests",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}